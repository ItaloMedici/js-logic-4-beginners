/**
 * Calculadora Simples:
 *
 * Crie uma fun√ß√£o que receba dois n√∫meros e uma
 * opera√ß√£o (adi√ß√£o, subtra√ß√£o, multiplica√ß√£o ou divis√£o)
 * e retorne o resultado da opera√ß√£o aplicada aos dois n√∫meros.
 *
 *
 * Exemplo:
 * - Para os n√∫meros 2 e 3 e a opera√ß√£o "adi√ß√£o", a sa√≠da deve ser 5.
 * - Para os n√∫meros 2 e 3 e a opera√ß√£o "subtra√ß√£o", a sa√≠da deve ser -1.
 * - Para os n√∫meros 2 e 3 e a opera√ß√£o "multiplica√ß√£o", a sa√≠da deve ser 6.
 */

type Operation = "adi√ß√£o" | "subtra√ß√£o" | "multiplica√ß√£o" | "divis√£o";

function basicCalculator(num1: number, num2: number, operation: Operation) {
  // implemente sua l√≥gica aqui
}

// Execute seus testes üëá

describe("Calculadora Simples", () => {
  test("Adi√ß√£o", () => {
    expect(basicCalculator(2, 3, "adi√ß√£o")).toBe(5);
  });

  test("Subtra√ß√£o", () => {
    expect(basicCalculator(2, 3, "subtra√ß√£o")).toBe(-1);
  });

  test("Multiplica√ß√£o", () => {
    expect(basicCalculator(2, 3, "multiplica√ß√£o")).toBe(6);
  });

  test("Divis√£o", () => {
    expect(basicCalculator(6, 3, "divis√£o")).toBe(2);
  });
});
